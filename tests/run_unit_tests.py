#!/usr/bin/env python3
"""
Script para ejecutar tests unitarios (sin servidor)

Este script ejecuta solo los tests que no requieren que el servidor est√© ejecut√°ndose.
Los tests de integraci√≥n que requieren servidor deben ejecutarse por separado.
"""

import subprocess
import sys

def run_unit_tests():
    """Ejecuta solo los tests unitarios que no requieren servidor."""
    
    print("üß™ Ejecutando tests unitarios del proyecto YOLO Multi-Class Annotator...")
    print("=" * 70)
    
    # Tests que NO requieren servidor activo
    unit_tests = [
        "tests/test_environment.py",     # Tests de configuraci√≥n del entorno
        "tests/test_mysql_script.py",    # Tests de validaci√≥n del script MySQL
        "tests/test_token.py",           # Tests de JWT (no requiere servidor)
        "tests/test_mysql.py",           # Tests de conexi√≥n MySQL (no requiere servidor)
        "tests/test_auth.py",            # Tests b√°sicos de auth (no requiere servidor)
        "tests/test_images.py"           # Tests de im√°genes (no requiere servidor)
    ]
    
    # Tests que S√ç requieren servidor (comentados para referencia)
    integration_tests = [
        # "tests/test_auth_full.py",    # Requiere servidor activo
        # "tests/test_classes.py"       # Requiere servidor activo
    ]
    
    print("Tests unitarios a ejecutar:")
    for test in unit_tests:
        print(f"  ‚úì {test}")
    
    print("\nTests de integraci√≥n (requieren servidor activo):")
    for test in integration_tests:
        print(f"  ‚ö†Ô∏è {test}")
    
    print("\n" + "=" * 70)
    
    # Ejecutar tests unitarios
    try:
        cmd = ["pytest"] + unit_tests + ["-v", "--tb=short"]
        result = subprocess.run(cmd, check=True)
        
        print("\nüéâ ¬°Todos los tests unitarios pasaron exitosamente!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Algunos tests fallaron. C√≥digo de salida: {e.returncode}")
        return False
    except FileNotFoundError:
        print("\n‚ùå Error: pytest no est√° instalado o no est√° en el PATH")
        print("Instala pytest con: pip install pytest")
        return False

def run_integration_tests():
    """Informaci√≥n sobre c√≥mo ejecutar tests de integraci√≥n."""
    
    print("\n" + "=" * 70)
    print("üìã Para ejecutar tests de integraci√≥n:")
    print("=" * 70)
    
    print("\n1. Inicia el servidor de desarrollo:")
    print("   python app_auth.py")
    
    print("\n2. En otra terminal, ejecuta los tests de integraci√≥n:")
    print("   pytest tests/test_auth_full.py -v")
    print("   pytest tests/test_classes.py -v")
    
    print("\n3. O ejecuta todos los tests (unitarios + integraci√≥n):")
    print("   pytest tests/ -v")

if __name__ == "__main__":
    success = run_unit_tests()
    run_integration_tests()
    
    sys.exit(0 if success else 1)
